makeCacheMatrix <- function(x = matrix()) {
I = NULL
set <- function(y) {
x <<- y
I <<- NULL
}
get <- function() x
setInv <- function(inv) I <<- inv
getInv <- function() I
list(set = set,
get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getInv()
if(!is.null(I)){
message("getting cached data")
return(I)
}
data <- x$get()
I <- solve(data)
x$setInv(I)
I
}
View(cacheSolve)
View(cacheSolve)
View(makeCacheMatrix)
View(makeCacheMatrix)
m <- matrix(rnorm(16),4,4)
View(m)
m <- matrix(rnorm(1:16),4,4)
View(m)
m <- matrix(1:16,4,4)
View(m)
makeCacheMatrix <- function(x = matrix()) {
I = NULL
set <- function(y) {
x <<- y
I <<- NULL
}
get <- function() x
setInv <- function(inverse) I <<- inverse
getInv <- function() I
list(set = set,
get = get,
setInv = setInv,
getInv = getInv)
}
## This function computes the inverse Matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getInv()
if(!is.null(I)){
message("getting cached data")
return(I)
}
data <- x$get()
I <- solve(data)
x$setInv(I)
I
}
minv <- makeCacheMatrix(m)
View(makeCacheMatrix)
View(makeCacheMatrix)
cacheSolve(minv)
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
m <- matrix(1:16,4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
m <- matrix(1:4, 2, 2)
View(m)
View(m)
makeCacheMatrix(m)
my_matrix$get()
## Put comments here that give an overall description of what your
## functions do
## This function creates a "reverse array" object that you can cache
makeCacheMatrix <- function(x = matrix()) {
I = NULL
set <- function(y) {
x <<- y
I <<- NULL
}
get <- function() x
setinverse <- function(inverse) I <<- inverse
getinverse <- function() I
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse Matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getinverse()
if(!is.null(I)){
message("getting cached data")
return(I)
}
data <- x$get()
I <- solve(data,...)
x$setinverse(I)
I
}
m <- matrix(1:4, 2, 2)
makeCacheMatrix(m)
makeCacheMatrix <- function(x = matrix()) {
I = NULL
set <- function(y) {
x <<- y
I <<- NULL
}
get <- function() x
setinverse <- function(inverse) I <<- inverse
getinverse <- function() I
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse Matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getinverse()
if(!is.null(I)){
message("getting cached data")
return(I)
}
data <- x$get()
I <- solve(data,...)
x$setinverse(I)
I
}
#Testing functions
m <- matrix(1:4, 2, 2)
makeCacheMatrix(m)
m <- matrix(1:4, 2, 2)
View(m)
View(m)
minv <- makeCacheMatrix(m)
View(minv)
w <- cacheSolve(minv)
View(w)
View(w)
m <- matrix(rnorm(16),4,4)
minv <- makeCacheMatrix(m)
w <- cacheSolve(minv)
View(w)
View(m)
View(w)
View(m)
View(w)
View(w)
View(w)
View(w)
m <- matrix(1:4,2,2)
minv <- makeCacheMatrix(m)
w <- cacheSolve(minv)
View(m)
View(w)
View(m)
m <- matrix(1:9,3,3)
minv <- makeCacheMatrix(m)
w <- cacheSolve(minv)
m <- matrix(1:16,4,3)
minv <- makeCacheMatrix(m)
w <- cacheSolve(minv)
View(m)
View(m)
View(w)
View(w)
m <- matrix(1:16,4,4)
minv <- makeCacheMatrix(m)
w <- cacheSolve(minv)
m <- matrix(1:4,2,2)
minv <- makeCacheMatrix(m)
w <- cacheSolve(minv)
View(w)
View(w)
View(m)
